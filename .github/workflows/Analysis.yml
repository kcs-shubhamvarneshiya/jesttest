name: Check testcases and quality gate status

on:
  push:
    branches:
      - '*'
  
  pull_request: 
    branches:
      - '*'

jobs:
  sonarqube-analysis:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "14"

      - name: Install dependencies
        run: npm install

      - name: Run testcases with generatig coverage report
        run: |
          npm test --coverage --coverageReporters=text-lcov | tee coverage.lcov
          echo "exit_code=$((${PIPESTATUS[0]}))" >> $GITHUB_ENV

      - name: Check test exit code
        run: |
            if [ $exit_code -ne 0 ]; then
                echo "Test cases failed !! Exiting..."
                exit 1
              else
                echo "cheers up, all Test cases are passed !!"
              fi

      - name: Set branch name        
        id: set_branch        
        run: |
          if [[ $GITHUB_EVENT_NAME == 'pull_request' ]]; then
            BRANCH_NAME=${GITHUB_BASE_REF}
          else
            BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})
            fi
            echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
      
      - name: Scanning the project with sonarQube scanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          npm install -g sonarqube-scanner
          sonar-scanner \
            -Dsonar.host.url=${{secrets.SERVER_URL}} \
            -Dsonar.projectKey=${{secrets.PROJECT_KEY}} \
            -Dsonar.sources=./src \
            -Dsonar.test.inclusions=test/index.test.js \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
            -Dsonar.login=${{secrets.PROJECT_TOKEN}} \
            -Dsonar.branch.name=$BRANCH_NAME

      - name: identify SonarQube Quality Gate status
        run: |
          echo "Identifying quality gate status..."
            #STATUS=$(curl -s "${{secrets.SERVER_URL}}/api/qualitygates/project_status?projectKey=${{secrets.PROJECT_KEY}}" -u "${{secrets.LOGIN_TOKEN}}" | jq -r '.projectStatus.status')
            
            if [ "$STATUS" != "OK" ]; then
              echo "SonarQube Quality Gate Failed !!"
              exit 1
              else
                echo "SonarQube Quality Gate passed !!" 
              fi
              - name: HTTP Request to SonarQube
              id: sonarqube_request
              uses: actions/http-request@v2
              with:
                url: https://sonarqube.kcspl.in/api/qualitygates/project_status?projectKey=Ecard_Ecard&pullRequest=${{ steps.pr_number.outputs.pr_number }}
                headers: |
                  ${{ secrets.YOUR_AUTHORIZATION_HEADERS }}  # Replace with your actual authorization headers
      
            - name: Output SonarQube Response
              run: echo "${{ steps.sonarqube_request.outputs.body }}"    