name: Check testcases and quality gate status

on:
  pull_request:
    branches:
      - "*"

jobs:
  sonarqube-analysis:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "14"

      - name: Install dependencies
        run: npm install

      - name: Run testcases with generatig coverage report
        run: |
          npm test --coverage --coverageReporters=text-lcov | tee coverage.lcov
          echo "exit_code=$((${PIPESTATUS[0]}))" >> $GITHUB_ENV
          echo "Hello semicolon;"

      - name: Check test exit code
        run: |
          if [ $exit_code -ne 0 ]; then
              echo "Test cases failed !! Exiting..."
              exit 1
          else
              echo "cheers up, all Test cases are passed !!"
          fi

      - name: Set branch name
        id: set_branch
        run: |
          if [[ $GITHUB_EVENT_NAME == 'pull_request' ]]; then
          BRANCH_NM=${GITHUB_HEAD_REF}
          else
          BRANCH_NM=$(echo ${GITHUB_REF#refs/heads/})
          fi
          echo "BRANCH_NAME=((${BRANCH_NE}))" >> $GITHUB_ENV

      - name: Scanning the project with sonarQube scanner
        run: |
          if [[ $GITHUB_EVENT_NAME == 'pull_request' ]]; then
            BRANCH_NAME=${GITHUB_HEAD_REF}
          else
            BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})
          fi
            echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV

          # if [[ $GITHUB_REF == refs/pull/*/merge* ]]; then
          #   PullRequestId=$(echo $GITHUB_REF | sed -E 's#refs/pull/([0-9]+)/merge#\1#')
          #   BranchName="pullRequest=$PullRequestId"
          # else
          #   IFS='/' read -ra branchParts <<< "$GITHUB_REF"
          #   remainingBranchParts=("${branchParts[@]:2}")
          #   remainingBranchString=$(IFS='/' ; echo "${remainingBranchParts[*]}")
          #   BranchName="branch=$remainingBranchString"
          # fi
            
          npm install -g sonarqube-scanner
            sonar-scanner \
              -Dsonar.host.url=${{secrets.SERVER_URL}} \
              -Dsonar.projectKey=${{secrets.PROJECT_KEY}} \
              -Dsonar.sources=./src \
              -Dsonar.test.inclusions=test/index.test.js \
              -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
              -Dsonar.login=${{secrets.PROJECT_TOKEN}} \
              -D.sonar.pullrequest.base=main \
              -D.sonar.pullrequest.branch=$GITHUB_HEAD_REF
              # -Dsonar.branch.name=$BRANCH_NAME

            echo "Pull reqest branch  : $GITHUB_HEAD_REF"
            echo "Pull Request NAme : $GITHUB_EVENT_NAME"
            echo "Pull Request Id" : $GITHUB_EVENT_NUMBER"

      - name: identify SonarQube Quality Gate status

        id: quality_gate_status
        run: |
          echo "Identifying quality gate status..."


          if [[ $GITHUB_REF == refs/pull/*/merge* ]]; then
            PullRequestId=$(echo $GITHUB_REF | sed -E 's#refs/pull/([0-9]+)/merge#\1#')
            # BranchName="pullRequest=$PullRequestId"
          else
            IFS='/' read -ra branchParts <<< "$GITHUB_REF"
            remainingBranchParts=("${branchParts[@]:2}")
            remainingBranchString=$(IFS='/' ; echo "${remainingBranchParts[*]}")
            BranchName="branch=$remainingBranchString"
          fi

          STATUS=$(curl -s "${{secrets.SERVER_URL}}/api/qualitygates/project_status?projectKey=${{secrets.PROJECT_KEY}}&pullRequest=$PullRequestId" -u "${{secrets.LOGIN_TOKEN}}" | jq -r '.projectStatus.status')
          echo "Quality Gate Status for branch $BRANCH_NAME: $STATUS"
          echo "QUALITY_GATE_STATUS=$STATUS" >> $GITHUB_ENV

      - name: Check Quality Gate status
        run: |
          if [ "$QUALITY_GATE_STATUS" != "OK" ]; then
            echo "SonarQube Quality Gate Failed for branch $BRANCH_NAME!!"
            exit 1
          else
            echo "SonarQube Quality Gate passed for branch $BRANCH_NAME!!"
          fi
